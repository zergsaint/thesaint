Title: Bacula | The Saint | Johan BÃ¶rjesson
Link text: Bacula and how to manage
Description: Bacula and everything beyond storage
Keywords: bacula
Categories: sysadmin
Date: 26 February 2015
Summary: Backups and how to do it

%h1
  Improve your backups and save the day

:markdown
  I have been doing some research into how to make virtual full backups with bacula. This has been a bit challenging since I am creating an virtual server to use as lab for bacula storage.
  So after the initial configuration I will try to make the container run its mysql from the SSD drives from the storage node.

  In this article I will present how the work progressed and what issues i encountered. So the basics is simple, after the installation of the OpenVZ server I had to make some custom settings for the container itself.
  And after that it was the basic install of bacula, the only thing I changed is the running scheme (will get back to that later). So first before anything the directorie /var/lib/mysql should have its physical storage on the SSD drives.

  This is due to the performance enhancement it will give the database further on in the project.
  
  So on the storage node I created `/etc/vz/conf/{vzid}.mount`
  <pre><code>#!/bin/bash

  . /etc/vz/vz.conf
  . ${VE_CONFFILE}
  SRC=/vz-ssd-data/{vzid}/
  DST=/var/lib/mysql
  if [ ! -e ${VE_ROOT}${DST} ]; then mkdir -p ${VE_ROOT}${DST}; fi
  mount -n -t simfs ${SRC} ${VE_ROOT}${DST} -o ${SRC}

  </code></pre>


  Once this script has been save a restart of the container is needed to remount the directory on the other harddrives.

  
%h2
  Bacula

:markdown
  The installation and configuration of bacula can be a bit tricky. There are different files/demons that are depending on eachother and several passwords to handle. So to grasp the greater picture is not allways easy.

%a{ :href => '/attachments/img/general/bacula.jpg', :class => 'content-example viewable-image' }
  %img{ :src => '/attachments/img/general/bacula.jpg', :alt => 'Structure', :title => 'The greater picture' }
  %span.subtle-text.pull-centre
    Picture 1
    %br
    The configuration
    %br
    source www.bacula.com

:markdown
  
  The picture of the configuration (picture 1) is a great guideline in how to get your bacula service up and running in no time. So now the basic work is done and the LAB can begin.

%h2
  The plan


:markdown
  So the plan is to have a fullbackup once every month, then run virtualfull backups once every week, and inbetween these it will be the incremental jobs. The data will be saved for 30 days since I dont want to save outdated data.
  So why would i want to run a virtualfull backup instead of the normal full? well it is due to the amount of data that is going to be backed up. If it was a couple of large files it would do, but if you backup several thousands small files it will take a small eternity for the job to finish.

  
  The scheme i set up looks something like this.
  <pre><code>
  Schedule {
  Name = "OneWeek_Friday"
  Run = Full 1st fri at 00:05
  Run = VirtualFull 2nd-5th fri at 00:05
  Run = Incremental sat-thu at 00:05
  }
  </code></pre>  

:markdown
  
  I would recomend that you spread the fullbackup jobs, over the week so not all full jobs will run on the same day.
  The config above is just a small example and nothing i would recomend. Since you are doing virtualfull jobs every week you could run a normal full job once every quarter or similar. 
  
  
  The thing with virtualjobs is that you need two pools, two storages and a feeling for troubleshoting.
  You will need the doubble pool since when you start the virtualfull job it will take the six last incremental jobs and push the data together to become a full backup.
  It is slight more complicated then that but i will leave it here for now.

  Example of my config for virtual backups.
  
  <pre><code>
  Pool {
    Name = bacula-pool-1
    Pool Type = Backup
    Recycle = yes
    AutoPrune = yes
    Volume Retention = 21 days
    # 1G*10 = 10G
    Maximum Volume Bytes = 1G
    Maximum Volumes = 10
    Label Format = "Bacula-1"
    Next Pool = "bacula-pool-2"
  }

  Pool {
    Name = bacula-pool-2
    Pool Type = Backup
    Recycle = yes
    AutoPrune = yes
    Volume Retention = 21 days
    # 1G*10 = 10G
    Maximum Volume Bytes = 1G
    Maximum Volumes = 10
    Label Format = "Bacula-1"
    Storage = bacula-stor-2
  }
  </code></pre>

  Important to notice is the "Next Pool" from Pool-1, this is essential to get the virtualfull jobs to work. 
  
  <pre><code>
  Storage {
    Name = bacula-stor-1
    Address = x.x.x.x
    SDPort = 9103
    Password = "password"
    Device = bacula-test1-1-dev
    Media Type = File
    Maximum Concurrent Jobs = 3
  }

  Storage {
    Name = bacula-stor-2
    Address = x.x.x.x
    SDPort = 9103
    Password = "password"
    Device = bacula-test1-2-dev
    Media Type = File
    Maximum Concurrent Jobs = 3
  }
  </code></pre>

:markdown

  I hope this will be a start for my article series for backups and how to manage. I know there is little content for how my thoughts are going at the moment.
  But for now I will work on the lab and get back to you with an much more detailed summary on how it worked for me.

